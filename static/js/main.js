// Generated by CoffeeScript 1.4.0
(function() {
  var $, app,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty;

  $ = angular.element;

  app = angular.module('plf', ['ui.bootstrap', 'ngRangeSlider']);

  app.config([
    '$compileProvider', function($compileProvider) {
      return $compileProvider.aHrefSanitizationWhitelist(/^\s*blob:/);
    }
  ]);

  app.controller('CreatorController', [
    '$scope', '$modal', function($scope, $modal) {
      var empty_rule, move_in_arr, render, render_properties, render_range;
      $scope.operators = {
        '>': 'More than',
        '>=': 'At least',
        '=': 'Equals',
        '<=': 'Up to',
        '<': 'Less than'
      };
      $scope.rarities = ['Normal', 'Magic', 'Rare', 'Unique'];
      empty_rule = {
        hide: false,
        hideshow: 'show',
        anyclass: true,
        classes: [],
        basetype: '',
        socketgroup: [],
        rarity: null,
        anyquality: true,
        quality: {
          from: 0,
          to: 20
        },
        anydroplvl: true,
        droplvl: {
          from: 0,
          to: 100
        },
        anyitemlvl: true,
        itemlvl: {
          from: 0,
          to: 100
        },
        anysockets: true,
        sockets: {
          from: 0,
          to: 6
        },
        anylinkedsockets: true,
        linkedsockets: {
          from: 0,
          to: 6
        },
        anyheight: true,
        height: {
          from: 1,
          to: 4
        },
        anywidth: true,
        width: {
          from: 1,
          to: 2
        },
        anylabel: true,
        label: {
          border: {
            r: 0,
            g: 0,
            b: 0,
            a: 0
          },
          size: 32,
          textcolor: {
            r: 255,
            g: 255,
            b: 255,
            a: 255
          },
          bg: {
            r: 0,
            g: 0,
            b: 0,
            a: 240
          }
        },
        showborder: false,
        showsize: false,
        showtextcolor: false,
        showbg: false,
        nosound: true,
        sound: '1',
        setvolume: false,
        volume: 150
      };
      $scope.add = function() {
        return $scope.rules.push(angular.copy(empty_rule));
      };
      $scope.rules = [];
      $scope.classes = ['Active Skill Gems', 'Amulets', 'Arrowcuda', 'Basaltic Stinger', 'Belts', 'Body Armours', 'Boots', 'Bows', 'Burrowmundi', 'Chromatic Squirter', 'Claws', 'Coffinjaw', 'Currency', 'Daggers', 'Deathgrinner', 'Equalussuaquatch', 'Fangtooth', 'Fishing Rods', 'Flameray', 'Gloves', 'Heliobenth', 'Helmets', 'Hideout Doodads', 'Hulkeri', 'Hybrid Flasks', 'Kilimorae', 'Knifeback', 'Life Flasks', 'Mana Flasks', 'Map Fragments', 'Maps', 'Microtransactions', 'One Hand Axes', 'One Hand Maces', 'One Hand Swords', 'Planc Grai', 'Plink Snapper', 'Quest Items', 'Quivers', 'Rings', 'Sceptres', 'Shields', 'Socketclops', 'Stackable Currency', 'Staves', 'Support Skill Gems', 'Teslateuth', 'Thrusting One Hand Swords', 'Two Hand Axes', 'Two Hand Maces', 'Two Hand Swords', 'Utility Flasks', 'Wands'];
      $scope.has_class = function(rule, cls) {
        return __indexOf.call(rule.classes, cls) >= 0;
      };
      $scope.toggle_class = function(rule, cls) {
        if (__indexOf.call(rule.classes, cls) >= 0) {
          return rule.classes.splice(rule.classes.indexOf(cls), 1);
        } else {
          return rule.classes.push(cls);
        }
      };
      $scope.edit_socket_group = function(rule) {
        return $modal.open({
          template: '\
      <div class="modal-header">\
        Edit linked sockets group\
      </div>\
      <div class="modal-body">\
        <div ng-hide="sockets.length > 5">\
          <button type="button" class="btn-xs btn-danger" ng-click="sockets.push(\'red\')">\
            <span class="glyphicon glyphicon-plus"></span> red\
          </button>\
          <button type="button" class="btn-xs btn-success" ng-click="sockets.push(\'green\')">\
            <span class="glyphicon glyphicon-plus"></span> green\
          </button>\
          <button type="button" class="btn-xs btn-primary" ng-click="sockets.push(\'blue\')">\
            <span class="glyphicon glyphicon-plus"></span> blue\
          </button>\
          <button type="button" class="btn-xs btn-default" ng-click="sockets.push(\'white\')">\
            <span class="glyphicon glyphicon-plus"></span> white\
          </button>\
        </div>\
        <div class="well well-sm" ng-show="sockets.length">\
          <button type="button" ng-repeat="socket in sockets track by $index"\
                  class="btn btn-xs" ng-click="sockets.splice($index, 1)"\
                  ng-class="\'btn-\' + ({red: \'danger\', blue: \'primary\', green: \'success\', white: \'default\'})[socket]"\
                  ng-bind="socket" title="remove &laquo;{{ socket }}&raquo; from socket group"></button>\
          <button type="button" class="btn btn-xs btn-default"\
                  ng-show="sockets.length" ng-click="sockets.splice(0, sockets.length)">\
            <span class="glyphicon glyphicon-remove"></span> clear\
          </button>\
        </div>\
      </div>\
      <div class="modal-footer">\
        <button type="button" class="btn-success" ng-click="done()">Done</button>\
        <button type="button" class="btn-default" ng-click="$dismiss()">Cancel</button>\
      </div>',
          controller: [
            '$scope', function($modal_scope) {
              $modal_scope.sockets = angular.copy(rule.socketgroup);
              return $modal_scope.done = function() {
                rule.socketgroup = $modal_scope.sockets;
                return $modal_scope.$close();
              };
            }
          ]
        });
      };
      $scope.fmt_range = function(range) {
        if (range.to === range.from) {
          return String(range.to);
        }
        return "From " + range.from + " to " + range.to;
      };
      $scope.get_color = function(c) {
        return "RGBA(" + c.r + ", " + c.g + ", " + c.b + ", " + (c.a / 255) + ")";
      };
      $scope.get_size = function(size) {
        return parseInt(Math.round(size / 2)) + 'px';
      };
      render_range = function(param, range) {
        if (range.to === range.from) {
          return "\n    " + param + " = " + range.to;
        }
        return "\n    " + param + " >= " + range.from + "\n    " + param + " <= " + range.to;
      };
      render = function(blocks) {
        var block, key, range_params, res, value, _i, _len, _ref;
        res = '';
        range_params = ['Quality', 'DropLevel', 'ItemLevel', 'Width', 'Height', 'Sockets', 'LinkedSockets'];
        for (_i = 0, _len = blocks.length; _i < _len; _i++) {
          block = blocks[_i];
          res += block[0];
          _ref = block[1];
          for (key in _ref) {
            if (!__hasProp.call(_ref, key)) continue;
            value = _ref[key];
            if (__indexOf.call(range_params, key) < 0) {
              res += "\n    " + key + " " + value;
            } else {
              res += render_range(key, value);
            }
          }
          res += '\n';
        }
        return res;
      };
      render_properties = function(rule) {
        var cls, color, obj, sound;
        obj = {};
        if (!rule.anyclass) {
          if (rule.classes.length) {
            obj.Class = ((function() {
              var _i, _len, _ref, _results;
              _ref = rule.classes;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                cls = _ref[_i];
                _results.push('"' + cls + '"');
              }
              return _results;
            })()).join(' ');
          }
        }
        if (rule.basetype && rule.basetype.length) {
          obj.BaseType = '"' + rule.basetype + '"';
        }
        if (rule.rarity) {
          obj.Rarity = rule.rarity;
        }
        if (rule.socketgroup.length) {
          obj.SocketGroup = ((function() {
            var _i, _len, _ref, _results;
            _ref = rule.socketgroup;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              color = _ref[_i];
              _results.push({
                red: 'R',
                green: 'G',
                blue: 'B',
                white: 'W'
              }[color]);
            }
            return _results;
          })()).join('');
        }
        if (!rule.anyquality) {
          obj.Quality = rule.quality;
        }
        if (!rule.anydroplvl) {
          obj.DropLevel = rule.droplvl;
        }
        if (!rule.anyitemlvl) {
          obj.ItemLevel = rule.itemlvl;
        }
        if (!rule.anysockets) {
          obj.Sockets = rule.sockets;
        }
        if (!rule.anylinkedsockets) {
          obj.LinkedSockets = rule.linkedsockets;
        }
        if (!rule.anyheight) {
          obj.Height = rule.height;
        }
        if (!rule.anywidth) {
          obj.Width = rule.width;
        }
        if (!rule.anylabel) {
          obj.SetBorderColor = [rule.label.border.r, rule.label.border.g, rule.label.border.b, rule.label.border.a].join(' ');
          obj.SetTextColor = [rule.label.textcolor.r, rule.label.textcolor.g, rule.label.textcolor.b, rule.label.textcolor.a].join(' ');
          obj.SetBackgroundColor = [rule.label.bg.r, rule.label.bg.g, rule.label.bg.b, rule.label.bg.a].join(' ');
          obj.SetFontSize = rule.label.size;
        }
        if (!rule.nosound) {
          sound = rule.sound;
          if (rule.setvolume) {
            sound += ' ' + rule.volume;
          }
          obj.PlayAlertSound = sound;
        }
        return obj;
      };
      $scope.generate = function() {
        var block, blocks, rule, _i, _len, _ref;
        blocks = [];
        _ref = $scope.rules;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          rule = _ref[_i];
          if (rule.hideshow === 'hideall') {
            blocks.push(['Hide', {}]);
            return render(blocks);
          } else if (rule.hideshow === 'show') {
            block = ['Show', {}];
          } else if (rule.hideshow === 'hide') {
            block = ['Hide', {}];
          } else {
            throw 'WTF! ' + rule.hideshow;
          }
          blocks.push(block);
          block[1] = render_properties(rule);
        }
        return render(blocks);
      };
      move_in_arr = function(arr, element, offset) {
        var index, newIndex, removedElement;
        index = arr.indexOf(element);
        newIndex = index + offset;
        if (newIndex > -1 && newIndex < arr.length) {
          removedElement = arr.splice(index, 1)[0];
          return arr.splice(newIndex, 0, removedElement);
        }
      };
      $scope.move_up_rule = function(rule) {
        return move_in_arr($scope.rules, rule, -1);
      };
      $scope.move_down_rule = function(rule) {
        return move_in_arr($scope.rules, rule, 1);
      };
      $scope.result = '';
      $scope.$watch('rules', function() {
        return $scope.result = $scope.generate();
      }, true);
      return $scope.download = function() {
        var a, blob, url;
        a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        a.target = '_blank';
        blob = new Blob([$scope.result], {
          type: 'text/plain'
        });
        url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'loot-filter.filter';
        a.click();
        window.URL.revokeObjectURL(url);
        return document.body.removeChild(a);
      };
    }
  ]);

  $(document).ready(function() {
    return angular.bootstrap(document, ['plf']);
  });

}).call(this);
